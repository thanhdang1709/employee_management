<?php

/**
 * Class and Function List:
 * Function list:
 * - __construct()
 * - users_get()
 * - users_post()
 * - users_delete()
 * - demo_get()
 * Classes list:
 * - Api extends REST_Controller
 */
defined('BASEPATH') or exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions

/** @noinspection PhpIncludeInspection */
require APPPATH . 'libraries/REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */


use \Firebase\JWT\JWT;

class Api extends REST_Controller
{

    protected $key;

    function __construct()
    {
        // Construct the parent class
        parent::__construct();
        $this->load->model('Api_model');
        $this->load->model('Staff_model');

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['users_get']['limit']            = 500; // 500 requests per hour per user/key
        $this->methods['users_post']['limit']            = 100; // 100 requests per hour per user/key
        $this->methods['users_delete']['limit']            = 50; // 50 requests per hour per user/key

        header('Access-Control-Allow-Origin: *');
        header("Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE");
        $this->post = $_REQUEST;

        $this->key = 'ma_training';
    }

    public function users_get()
    {
        // Users from a data store e.g. database
        $users      = $this->Api_model->getAllEmployee();

        /*foreach ($users as $key => $value) {
            
            $staff_department = $this->Staff_model->staff_department($value->id);
            
                foreach ($staff_department as $value2) {
                   $departments['departments']['department_id'][] =  $value2->department_id;
                   $departments['departments']['department_name'][] =  $value2->department_name;
                }    
        
                 $array[] = (array_merge((array)$users[$key],$departments));
            
           
        
                
        }   */
        //dd($users);


        $id         = $this->get('id');

        // If the id parameter doesn't exist return all the users
        if ($id === NULL) {
            // Check if the users data store contains users (in case the database result returns NULL)
            if ($users) {
                // Set the response and exit
                $this->response($users, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code

            } else {
                // Set the response and exit
                $this->response(['status'    => false, 'message'    => 'No users were found'], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code

            }
        }

        // Find and return a single record for a particular user.
        $id = (int)$id;

        // Validate the id.
        if ($id <= 0) {
            // Invalid id, set the response and exit.
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code

        }

        // Get the user from the array, using the id as key for retrieval.
        // Usually a model is to be used for this.
        $user = NULL;

        if (!empty($users)) {
            foreach ($users as $key  => $value) {

                if (isset($value->id) && (int)$value->id === $id) {
                    $user = $value;
                }
            }
        }

        if (!empty($user)) {
            $this->set_response($user, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code

        } else {
            $this->set_response(['status'         => false, 'message'         => 'User could not be found'], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code

        }
    }

    public function users_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'), 'email' => $this->post('email'), 'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code

    }

    public function users_delete()
    {
        $id = (int)$this->get('id');

        // Validate the id.
        if ($id <= 0) {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code

        }

        // $this->some_model->delete_something($id);
        $message = ['id' => $id, 'message' => 'Deleted the resource'];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code

    }

    public function demo_get()
    {
        $message = ['name' => 'Codeigniter rest api', 'city' => 'mal.vn'];
        $this->set_response($message, REST_Controller::HTTP_OK);
    }
    public function checkPhone_post()
    {
        $phone    = $this->post('phone');
        $result = $this->Staff_model->find_phone($phone);
        $data = array();
        if ($result) {
            $this->set_response(['message' => 'already exist', 'error' => 1], REST_Controller::HTTP_OK);
        } else {
            $this->set_response(['message' => 'Availble', 'error' => 0], REST_Controller::HTTP_OK);
        }
    }


    public function checkEmail_post()
    {
        $email    = $this->post('email');
        $result = $this->Staff_model->find_email($email);
        $data = array();
        if ($result) {
            $this->set_response(['message' => 'already exist', 'error' => 1], REST_Controller::HTTP_OK);
        } else {
            $this->set_response(['message' => 'Availble', 'error' => 0], REST_Controller::HTTP_OK);
        }
    }

    public function login_post()
    {
        $email          = $this->post('username');
        $password       = $this->post('password');



        if (empty($email) || empty($password)) {
            $this->set_response(['message' => 'Email or Password not empty!', 'error' => true], REST_Controller::HTTP_OK);
        } else {
            $result = $this->Api_model->user($email, $password);

            //$data = array();
            if ($result->num_rows() > 0) {
                $user = $result->row();
                //dd($user);
                $data['id'] = $user->id;
                $data['name'] = $user->name;
                $data['email'] = $user->email;
                $data['status'] = $user->status;
                $data['role'] = $user->role;
                $data['created_at'] = $user->created_at;
                $data['updated_at'] = $user->updated_at;

                $date = date('Y-m-d', strtotime(' +1 day'));
                $exp = (strtotime($date));

                $payload = array(
                    "token" => $data,
                    "exp" => $exp
                );

                $jwt = JWT::encode($payload, $this->key);

                $this->set_response(['token' => $jwt, 'error' => false], REST_Controller::HTTP_OK);
            } else {
                $this->set_response(['message' => 'User or Password wrong!', 'error' => true], REST_Controller::HTTP_UNAUTHORIZED);
            }
        }

        //dd($result);

    }
    public function getAllEmployee_post()
    {
        $token          = $this->post('token');
        // dd($this->input->get_request_header('Authorization', TRUE));
        $decode         = $this->checkAuth($token, $this->key);

        if ($decode) {
            $limit = $this->post('limit');
            $page = $this->post('page');
            if (!$limit || $limit > 10) {
                $limit = 10;
            }
            if (!$page) {
                $page = 1;
            }
            $employees = $this->Staff_model->getAllEmployee($limit, $page);
            $total_page = $this->Staff_model->get_count();
            // dd($employees);
            return $this->set_response(['data' => $employees, 'total' => $total_page, 'error' => false], REST_Controller::HTTP_OK);
        } else {
            return $this->set_response(['message' => 'Token error! Login again', 'error' => true], REST_Controller::HTTP_UNAUTHORIZED);
        }
    }
    public function getAllEmployee_get()
    {

        $limit = $this->post('limit');
        $page = $this->post('page');
        if (!$limit || $limit > 10) {
            $limit = 10;
        }
        if (!$page) {
            $page = 1;
        }
        $employees = $this->Staff_model->getAllEmployee($limit, $page);
        $total_page = $this->Staff_model->get_count();
        // dd($employees);
        return $this->set_response([$employees, 'total' => $total_page, 'error' => false], REST_Controller::HTTP_OK);
    }
    public function getAllDepartment_post()
    {
        $token          = $this->post('token');
        // dd($this->input->get_request_header('Authorization', TRUE));
        $decode         = $this->checkAuth($token, $this->key);

        if ($decode) {

            $limit = $this->post('limit');
            $page = $this->post('page');
            if (!$limit || $limit > 10 || $limit == -1) {
                $limit = 10;
            }
            if (!$page) {
                $page = 1;
            }

            $employees = $this->Department_model->departments_with_paginate($limit, $page);
            $total_page = $this->Department_model->get_count();
            return $this->set_response(['data' => $employees, "total" => $total_page, 'error' => false], REST_Controller::HTTP_OK);
        } else {
            return $this->set_response(['message' => 'Token error! Login again', 'error' => true], REST_Controller::HTTP_UNAUTHORIZED);
        }
    }
    public function editDepartment_post()
    {
        $token          = $this->post('token');
        // dd($this->input->get_request_header('Authorization', TRUE));
        $decode         = $this->checkAuth($token, $this->key);

        if ($decode) {

            $id     = $this->post('id');
            $name   = $this->post('name');
            $note   = $this->post('note');
            if ($id && $name && $note) {
                $employees = $this->Api_model->editDepartment($id, $name, $note);

                return $this->set_response(['data' => $employees, 'error' => false], REST_Controller::HTTP_OK);
            } else {
                return $this->set_response(['message' => 'Bad request', 'error' => true], REST_Controller::HTTP_BAD_REQUEST);
            }
        } else {

            return $this->set_response(['message' => 'Token error! Login again', 'error' => true], REST_Controller::HTTP_UNAUTHORIZED);
        }
    }
    public function addEmployee_post()
    {

        $token          = $this->post('token');
        // dd($this->input->get_request_header('Authorization', TRUE));
        $decode         = $this->checkAuth($token, $this->key);

        if ($decode) {

            $name = $this->post('name') ?? NULL;
            $phone = $this->post('phone') ?? NULL;
            $email = $this->post('email') ?? NULL;
            $note = $this->post('note') ?? NULL;

            $departments = ($this->post('departments')) ?? NULL;

            if ($name && $phone && $email && $note || $departments) {


                $config['upload_path'] = './assets/images';
                $config['allowed_types'] = 'jpg|jpeg|png';
                $config['max_size'] = '2048';
                $config['maintain_ratio'] = TRUE;
                $config['encrypt_name'] = TRUE;
                $config['detect_mime'] = TRUE;
                $config['file_name'] = $this->input->post('image');
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                if ($this->upload->do_upload('image')) {
                    $uploadData = $this->upload->data();
                    $data["image"] = base_url() . 'assets/images/' . $uploadData['file_name'];
                } else {
                    $this->session->set_flashdata('errors', $this->upload->display_errors());
                    $data["image"] = 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/480px-No_image_available.svg.png';
                }


                $data['name'] =  $name;
                $data['phone'] =  $phone;
                $data['email'] =  $email;
                $data['note'] =  $note;
                //$data['departments'] = explode(",", $departments);
                if ($departments == NULL) {
                    $departments = [];
                } else {
                    $departments = explode(",", $departments);
                }

                $result = $this->Staff_model->insert_item($data, $departments);
                if ($result) {
                    return $this->set_response(['message' => $result, 'error' => false], REST_Controller::HTTP_OK);
                } else {
                    return $this->set_response(['message' => 'Bad request', 'error' => true], REST_Controller::HTTP_BAD_REQUEST);
                }
            }
        } else {

            return $this->set_response(['message' => 'Token error! Login again', 'error' => true], REST_Controller::HTTP_UNAUTHORIZED);
        }

        // if ($decode) {

        //     $post     = $this->post('file');
        //     return $this->set_response($post, REST_Controller::HTTP_UNAUTHORIZED);
        // } else {

        //     return $this->set_response(['message' => 'Token error! Login again', 'error' => true], REST_Controller::HTTP_UNAUTHORIZED);
        // }
    }
    public function editEmployee_post()
    {

        $token          = $this->post('token');
        // dd($this->input->get_request_header('Authorization', TRUE));
        $decode         = $this->checkAuth($token, $this->key);

        if ($decode) {

            $id = $this->post('id') ?? NULL;
            $name = $this->post('name') ?? NULL;
            $phone = $this->post('phone') ?? NULL;
            $email = $this->post('email') ?? NULL;
            $note = $this->post('note') ?? NULL;

            $departments = ($this->post('departments')) ?? NULL;

            if ($name && $phone && $email && $note || $departments) {


                $config['upload_path'] = './assets/images';
                $config['allowed_types'] = 'jpg|jpeg|png';
                $config['max_size'] = '2048';
                $config['maintain_ratio'] = TRUE;
                $config['encrypt_name'] = TRUE;
                $config['detect_mime'] = TRUE;
                $config['file_name'] = $this->input->post('image');
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                if ($this->upload->do_upload('image')) {
                    $uploadData = $this->upload->data();
                    $data["image"] = base_url() . 'assets/images/' . $uploadData['file_name'];
                } else {
                    $this->session->set_flashdata('errors', $this->upload->display_errors());
                    $data["image"] = 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/480px-No_image_available.svg.png';
                }


                $data['name'] =  $name;
                $data['phone'] =  $phone;
                $data['email'] =  $email;
                $data['note'] =  $note;
                //$data['departments'] = explode(",", $departments);
                if ($departments == NULL) {
                    $departments = [];
                } else {
                    $departments = explode(",", $departments);
                }

                $result = $this->Staff_model->update_item($id, $data, $departments);
                if ($result) {
                    return $this->set_response(['message' => $result, 'error' => false], REST_Controller::HTTP_OK);
                } else {
                    return $this->set_response(['message' => 'Bad request', 'error' => true], REST_Controller::HTTP_BAD_REQUEST);
                }
            }
        } else {

            return $this->set_response(['message' => 'Token error! Login again', 'error' => true], REST_Controller::HTTP_UNAUTHORIZED);
        }
    }
    public function checkEmailEmployee_post()
    {
        $token          = $this->post('token');
        // dd($this->input->get_request_header('Authorization', TRUE));
        $decode         = $this->checkAuth($token, $this->key);

        if ($decode) {

            $email = $this->post('email');
            $id = $this->post('id');
            if ($id) {
                $check_email = $this->Staff_model->find_email_with_id($id, $email);

                if ($check_email->num_rows() > 0) {
                    return $this->set_response(['message' => 'Email already exists', 'error' => true], REST_Controller::HTTP_OK);
                } else {
                    return $this->set_response(['message' => 'Email available', 'error' => true], REST_Controller::HTTP_OK);
                }
            } else {
                $check_email = $this->Staff_model->find_email($email);

                if ($check_email->num_rows() > 0) {
                    return $this->set_response(['message' => 'Email already exists', 'error' => true], REST_Controller::HTTP_OK);
                } else {
                    return $this->set_response(['message' => 'Email available', 'error' => true], REST_Controller::HTTP_OK);
                }
            }
        } else {
            return $this->set_response(['message' => 'Token error! Login again', 'error' => true], REST_Controller::HTTP_UNAUTHORIZED);
        }
    }
    public function checkPhoneEmployee_post()
    {
        $token          = $this->post('token');
        // dd($this->input->get_request_header('Authorization', TRUE));
        $decode         = $this->checkAuth($token, $this->key);

        if ($decode) {

            $phone = $this->post('phone');
            $id = $this->post('id');
            if ($id) {
                $check_phone = $this->Staff_model->find_phone_with_id($id, $phone);

                if ($check_phone->num_rows() > 0) {
                    return $this->set_response(['message' => 'Phone already exists', 'error' => true], REST_Controller::HTTP_OK);
                } else {
                    return $this->set_response(['message' => 'Phone available', 'error' => true], REST_Controller::HTTP_OK);
                }
            } else {
                $check_phone = $this->Staff_model->find_phone($phone);

                if ($check_phone->num_rows() > 0) {
                    return $this->set_response(['message' => 'Phone already exists', 'error' => true], REST_Controller::HTTP_OK);
                } else {
                    return $this->set_response(['message' => 'Phone available', 'error' => true], REST_Controller::HTTP_OK);
                }
            }
        } else {
            return $this->set_response(['message' => 'Token error! Login again', 'error' => true], REST_Controller::HTTP_UNAUTHORIZED);
        }
    }
    public function deleteDepartment_post()
    {
        $token          = $this->post('token');
        // dd($this->input->get_request_header('Authorization', TRUE));
        $decode         = $this->checkAuth($token, $this->key);

        if ($decode) {

            $id     = $this->post('id');
            if ($id) {
                $employees = $this->Api_model->deleteDepartment($id);
                return $this->set_response(['data' => $employees, 'error' => false], REST_Controller::HTTP_OK);
            } else {
                return $this->set_response(['message' => 'Bad request', 'error' => true], REST_Controller::HTTP_BAD_REQUEST);
            }
        } else {

            return $this->set_response(['message' => 'Token error! Login again', 'error' => true], REST_Controller::HTTP_UNAUTHORIZED);
        }
    }
    public function deleteEmployee_post()
    {
        $token          = $this->post('token');
        // dd($this->input->get_request_header('Authorization', TRUE));
        $decode         = $this->checkAuth($token, $this->key);

        if ($decode) {

            $id     = $this->post('id');
            if ($id) {
                $employees = $this->Api_model->deleteEmployee($id);
                return $this->set_response(['data' => $employees, 'error' => false], REST_Controller::HTTP_OK);
            } else {
                return $this->set_response(['message' => 'Bad request', 'error' => true], REST_Controller::HTTP_BAD_REQUEST);
            }
        } else {

            return $this->set_response(['message' => 'Token error! Login again', 'error' => true], REST_Controller::HTTP_UNAUTHORIZED);
        }
    }
    public function addDepartment_post()
    {
        $token          = $this->post('token');
        // dd($this->input->get_request_header('Authorization', TRUE));
        $decode         = $this->checkAuth($token, $this->key);

        if ($decode) {

            $name     = $this->post('name');
            $note     = $this->post('note');

            if ($name && $note) {
                $employees = $this->Api_model->addDepartment($name, $note);
                return $this->set_response(['data' => $employees, 'error' => false], REST_Controller::HTTP_OK);
            } else {
                return $this->set_response(['message' => 'Bad request', 'error' => true], REST_Controller::HTTP_BAD_REQUEST);
            }
        } else {

            return $this->set_response(['message' => 'Token error! Login again', 'error' => true], REST_Controller::HTTP_UNAUTHORIZED);
        }
    }


    private function checkAuth(string $jwt, string $key)
    {

        try {
            return $decode =  JWT::decode($jwt, $key, array('HS256'));
        } catch (\Throwable $th) {
            //dd($th);
            return false;
        }
    }
}
